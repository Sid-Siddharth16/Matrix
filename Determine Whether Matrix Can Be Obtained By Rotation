class Solution {
    void rotate(int[][] matrix){
        int n = matrix.length;
        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                int t=matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = t;
            }
        }
        for(int i=0;i<n;i++){
            int l=0;
            int r=matrix[0].length-1;
            while(l<=r){
                int t = matrix[i][l];
                matrix[i][l] = matrix[i][r];
                matrix[i][r] = t;
                l++;
                r--;
            }
        }
    }
    boolean isSame(int[][] mat, int[][] target){
        int n=mat.length;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(mat[i][j] != target[i][j]){
                    return false;
                }
            }
        }
        return true;
    }
    public boolean findRotation(int[][] mat, int[][] target) {
        int n = mat.length;
       for(int i=0;i<4;i++){
           if(isSame(mat,target)){
               return true;
            }else{
                rotate(mat);
            }
       }
       return false;  
    }
}
